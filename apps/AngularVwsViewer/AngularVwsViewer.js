/* Copyright (c) 2014-2015, Human Brain Project
 *                          Cyrille Favreau <cyrille.favreau@epfl.ch>
 *
 * This file is part of RenderingResourceManager
 * <https://github.com/BlueBrain/RenderingResourceManager>
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License version 3.0 as published
 * by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

// Constants
var MODULE_SESSION = 'session';

var SESSION_STATUS_STOPPED = 0;
var SESSION_STATUS_SCHEDULED = 1;
var SESSION_STATUS_STARTING = 2;
var SESSION_STATUS_RUNNING = 3;
var SESSION_STATUS_STOPPING = 4;

var SESSION_COOKIE_ID = 'HBP';

var SESSION_COMMAND_NONE = '';
var SESSION_COMMAND_OPEN = 'open';
var SESSION_COMMAND_SCHEDULE = 'schedule';
var SESSION_COMMAND_IMAGEFEED = 'imagefeed';
var SESSION_COMMAND_STATUS = 'status';

var DEFAULT_URI = ''

var REST_VERB_POST = 'POST';
var REST_VERB_DELETE = 'DELETE';
var REST_VERB_PUT = 'PUT';
var REST_VERB_GET = 'GET';

// Controller
var app = angular.module('AngularVwsViewer', []);

/*
 * The vwsController performs the following actions:
 * - Creates a session on the Rendering Resource Manager
 * - Schedules the remote rendering resource according to the controller parameters
 * - Retrieves the status of the remote rendering resource
 * - Retrieves the URI of image streaming service for the rendering resource
 * Parameters supported by the controller are:
 * - serviceUrl: URL of the rendering resource manager
 * - arguments: Arguments to be passed to the rendering resource
 * - environment: Environment variables to used when starting the remote rendering resource
 * - modules: Modules to be loaded by the remote rendering resource scheduler
 * - width: Width of the image generated by the remote rendering resource
 * - height: Height of the image generated by the remote rendering resource
 */
app.controller('vwsController', function($scope, $attrs){

    // Parameters
    $scope.openSessionParams = {
        owner: $attrs.renderer + 'Controller',
        renderer_id: $attrs.renderer,
    };

    $scope.arguments = $attrs.arguments;
    $scope.environment = $attrs.environment;
    $scope.modules = $attrs.modules;
    $scope.serviceUrl = $attrs.serviceurl;
    $scope.width = $attrs.width;
    $scope.height = $attrs.height;

    // Member variables
    $scope.currentStatus = SESSION_STATUS_STOPPED;
    $scope.imagefeeduri = DEFAULT_URI

    // Intercepts the $destroy event in order to release the remote rendering resource
    $scope.$on('$destroy', function() {
        doRequest(REST_VERB_DELETE, MODULE_SESSION, SESSION_COMMAND_NONE);
    });

    /**
     * Processes an asynchronous HTML request according to specified parameters
     * @param {string} verb HTTP verb (POST, DELETE, GET, etc)
     * @param {string} module Module to be invoked on the remote API
     * @param {string} command Command to be executed on the remote API
     * @param {string} body JSON representation of the request body
     */
    function doRequest(verb, module, command, body) {
        var full_url = $scope.serviceUrl + '/' + module + '/' + command;
        var oReq = new XMLHttpRequest();
        oReq.withCredentials = true;
        oReq.open(verb, full_url, true);
        oReq.setRequestHeader(SESSION_COOKIE_ID, $scope.openSessionParams.renderer_id);

        var bodyStr;
        if (body) {
            oReq.setRequestHeader('Content-Type', 'application/json');
            bodyStr = JSON.stringify(body);
        }

        oReq.send(bodyStr);
        oReq.onload = function() {
            if (oReq.readyState == XMLHttpRequest.DONE) {
                if( command==='status' ) {
                    // The status of the remote rendering resource has been fetched.
                    // {{status}} can be populated accordingly
                    var obj = JSON.parse(oReq.response);
                    $scope.currentStatus = obj.code;
                    $scope.$apply(function() {
                        $scope.status = obj.description;
                    });
                }
                else if( command===SESSION_COMMAND_IMAGEFEED ) {
                    // The URI of the image streamer has been fetched. {{imagefeeduri}} can be
                    // populated accordingly
                    var obj = JSON.parse(oReq.response);
                    $scope.$apply(function() {
                        $scope.imagefeeduri = obj.uri;
                    });
                }
                switch( $scope.currentStatus ) {
                    case SESSION_STATUS_STOPPED:
                        // Session has been created but no rendering resource has been started
                        $scope.currentStatus = SESSION_STATUS_SCHEDULED;
                        startRemoteRenderingResource();
                        break;
                    case SESSION_STATUS_RUNNING:
                        // Remote rendering resource is running. The URI of the image streamer
                        // can now be fetched
                        if( $scope.imagefeeduri===DEFAULT_URI ) {
                            getImageStreaming();
                        }
                        break;
                }
            }
        }
    }

    /**
     * Fetches the URI of the image streamer got the current session. The result of the query
     * populates {{imagefeeduri}} accordingly
     */
    function getImageStreaming() {
        doRequest(REST_VERB_GET, MODULE_SESSION, SESSION_COMMAND_IMAGEFEED);
    }

    /**
     * Starts the remote rendering resource according to parameters passed to the controller
     */
    function startRemoteRenderingResource() {
        var params = {
            params: $scope.arguments,
            environment: $scope.environment,
        }
        doRequest(REST_VERB_PUT, MODULE_SESSION, SESSION_COMMAND_OPEN, params);
    }

    /**
     * Starts a timer that queries the remote rendering resource status and update the local
     * 'currentStatus' member variable. The result of the query populates {{status}}
     */
    var statusQuery = setInterval(function () {
        doRequest(REST_VERB_GET, MODULE_SESSION, SESSION_COMMAND_STATUS);
    }, 2000);

    // Create a session on the Rendering Resource Manager and initiates the process of starting
    // the remote rendering resource
    doRequest(REST_VERB_POST, MODULE_SESSION, SESSION_COMMAND_NONE, $scope.openSessionParams);
}
);